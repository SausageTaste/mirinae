#version 450

#define MULTISCATAPPROX_ENABLED 1

#include "../utils/konst.glsl"
#include "data.glsl"
#include "integrate.glsl"

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (binding = 0, rgba16f) uniform writeonly image3D out_image;

layout (set = 0, binding = 1) uniform sampler2D u_trans_lut;
layout (set = 0, binding = 2) uniform sampler2D u_multi_scat;

layout (push_constant) uniform U_AtmosCamVolPushConst {
    mat4 pv_inv;
    mat4 proj_inv;
    mat4 view_inv;
    vec4 sun_direction;
    vec4 view_pos;
} u_pc;


float AerialPerspectiveSliceToDepth(const float slice) {
    return slice * AP_KM_PER_SLICE;
}


vec4 gen_texel() {
    const float slice_id = float(gl_GlobalInvocationID.z);
    const vec2 pix_pos = vec2(gl_GlobalInvocationID.xy) + vec2(0.5);

    const AtmosphereParameters Atmosphere = GetAtmosphereParameters();

    const float out_resolution = 32;
    const vec3 clip_space = vec3(pix_pos / vec2(out_resolution) * vec2(2) - vec2(1), 0.5);
    const vec4 h_view_pos = u_pc.proj_inv * vec4(clip_space, 1.0);
    vec3 world_dir = normalize(mat3(u_pc.view_inv) * (h_view_pos.xyz / h_view_pos.w));

    const float earthR = Atmosphere.BottomRadius;
    const vec3 earthO = vec3(0, -earthR, 0);
    const vec3 cam_pos = u_pc.view_pos.xyz * M_TO_KM + vec3(0, earthR, 0);
    const vec3 SunDir = u_pc.sun_direction.xyz;
    const vec3 SunLuminance = vec3(0);

    float slice = (slice_id + 0.5) / AP_SLICE_COUNT;
    slice *= slice;	// squared distribution
    slice *= AP_SLICE_COUNT;

    vec3 world_pos = cam_pos;

    // Compute position from froxel information
    float tMax = AerialPerspectiveSliceToDepth(slice);
    vec3 new_world_pos = world_pos + tMax * world_dir;

    // If the voxel is under the ground, make sure to offset it out on the ground.
    float view_height = length(new_world_pos);
    if (view_height <= (Atmosphere.BottomRadius + PLANET_RADIUS_OFFSET)) {
        // Apply a position offset to make sure no artefact are visible close to the earth boundaries for large voxel.
        new_world_pos = normalize(new_world_pos) * (Atmosphere.BottomRadius + PLANET_RADIUS_OFFSET + 0.001);
        world_dir = normalize(new_world_pos - cam_pos);
        tMax = length(new_world_pos - cam_pos);
    }
    float tMaxMax = tMax;

    // Move ray marching start up to top atmosphere.
    view_height = length(world_pos);
    if (view_height >= Atmosphere.TopRadius) {
        const vec3 prev_world_pos = world_pos;
        if (!MoveToTopAtmosphere(world_pos, world_dir, Atmosphere.TopRadius)) {
            // Ray is not intersecting the atmosphere
            return vec4(0, 0, 0, 1);
        }
        float LengthToAtmosphere = length(prev_world_pos - world_pos);
        if (tMaxMax < LengthToAtmosphere) {
            // tMaxMax for this voxel is not within earth atmosphere
            return vec4(0, 0, 0, 1);
        }
        // Now world position has been moved to the atmosphere boundary: we need to reduce tMaxMax accordingly.
        tMaxMax = max(0, tMaxMax - LengthToAtmosphere);
    }

    const bool ground = false;
    const float sample_count_ini = max(1, (slice_id + 1) * 2);
    const float depth_buffer_value = -1;
    const bool variable_sample_count = false;
    const bool MieRayPhase = true;
    const SingleScatteringResult ss = IntegrateScatteredLuminance(
        pix_pos, world_pos, world_dir, SunDir, Atmosphere, ground, sample_count_ini,
        depth_buffer_value, variable_sample_count, MieRayPhase, tMaxMax,
        u_trans_lut, u_multi_scat, vec2(out_resolution), u_pc.pv_inv
    );

    const float transmittance = dot(ss.Transmittance, vec3(1.0 / 3.0));
    return vec4(ss.L, 1 - transmittance);
}


void main() {
    imageStore(out_image, ivec3(gl_GlobalInvocationID.xyz), gen_texel());
}
