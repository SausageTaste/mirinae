#version 450

#define MULTISCATAPPROX_ENABLED 1

#include "../utils/konst.glsl"
#include "data.glsl"
#include "integrate.glsl"

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (binding = 0, rgba16f) uniform writeonly image2D out_image;

layout (set = 0, binding = 1) uniform sampler2D u_trans_lut;
layout (set = 0, binding = 2) uniform sampler2D u_multi_scat;

layout (push_constant) uniform U_AtmosCamVolPushConst {
    mat4 pv_inv;
    mat4 proj_inv;
    mat4 view_inv;
    vec4 sun_direction;
    vec4 view_pos;
} u_pc;


#define NONLINEARSKYVIEWLUT 1
void UvToSkyViewLutParams(AtmosphereParameters Atmosphere, out float viewZenithCosAngle, out float lightViewCosAngle, float viewHeight, vec2 uv)
{
    // Constrain uvs to valid sub texel range (avoid zenith derivative issue making LUT usage visible)
    uv = vec2(fromSubUvsToUnit(uv.x, 192.0), fromSubUvsToUnit(uv.y, 108.0));

    float Vhorizon = sqrt(viewHeight * viewHeight - Atmosphere.BottomRadius * Atmosphere.BottomRadius);
    float CosBeta = Vhorizon / viewHeight;				// GroundToHorizonCos
    float Beta = acos(CosBeta);
    float ZenithHorizonAngle = PI - Beta;

    if (uv.y < 0.5f)
    {
        float coord = 2.0*uv.y;
        coord = 1.0 - coord;
#if NONLINEARSKYVIEWLUT
        coord *= coord;
#endif
        coord = 1.0 - coord;
        viewZenithCosAngle = cos(ZenithHorizonAngle * coord);
    }
    else
    {
        float coord = uv.y*2.0 - 1.0;
#if NONLINEARSKYVIEWLUT
        coord *= coord;
#endif
        viewZenithCosAngle = cos(ZenithHorizonAngle + Beta * coord);
    }

    float coord = uv.x;
    coord *= coord;
    lightViewCosAngle = -(coord*2.0 - 1.0);
}


void main() {
    const vec2 pixPos = vec2(gl_GlobalInvocationID.xy) + vec2(0.5);
    AtmosphereParameters Atmosphere = GetAtmosphereParameters();

    const vec2 tex_res = vec2(192, 108);
    vec3 ClipSpace = vec3((pixPos / tex_res) * vec2(2) - vec2(1), 1);
    vec4 HViewPos = u_pc.proj_inv * vec4(ClipSpace, 1);
    vec3 WorldDir = normalize(mat3(u_pc.view_inv) * (HViewPos.xyz / HViewPos.w));
    vec3 WorldPos = u_pc.view_pos.xyz / 1000 + vec3(0, Atmosphere.BottomRadius, 0);

    vec2 uv = pixPos / tex_res;

    float viewHeight = length(WorldPos);

    float viewZenithCosAngle;
    float lightViewCosAngle;
    UvToSkyViewLutParams(Atmosphere, viewZenithCosAngle, lightViewCosAngle, viewHeight, uv);

    vec3 SunDir;
    {
        vec3 UpVector = WorldPos / viewHeight;
        float sunZenithCosAngle = dot(UpVector, u_pc.sun_direction.xyz);
        SunDir = normalize(vec3(sqrt(1 - sunZenithCosAngle * sunZenithCosAngle), sunZenithCosAngle, 0));
    }

    WorldPos = vec3(0, viewHeight, 0);

    float viewZenithSinAngle = sqrt(1 - viewZenithCosAngle * viewZenithCosAngle);
    WorldDir = vec3(
        viewZenithSinAngle * lightViewCosAngle,
        viewZenithCosAngle,
        viewZenithSinAngle * sqrt(1.0 - lightViewCosAngle * lightViewCosAngle)
    );

    // Move to top atmospehre
    if (!MoveToTopAtmosphere(WorldPos, WorldDir, Atmosphere.TopRadius)) {
        // Ray is not intersecting the atmosphere
        imageStore(out_image, ivec2(gl_GlobalInvocationID.xy), vec4(0, 0, 0, 1));
        return;
    }

    const bool ground = false;
    const float SampleCountIni = 30;
    const float DepthBufferValue = -1.0;
    const bool VariableSampleCount = true;
    const bool MieRayPhase = true;
    SingleScatteringResult ss = IntegrateScatteredLuminance(
        pixPos, WorldPos, WorldDir, SunDir, Atmosphere, ground, SampleCountIni,
        DepthBufferValue, VariableSampleCount, MieRayPhase, 9000000.0,
        u_trans_lut, u_multi_scat, tex_res, u_pc.pv_inv
    );

    imageStore(out_image, ivec2(gl_GlobalInvocationID.xy), vec4(ss.L, 1));
}
