#version 450

#include "../utils/konst.glsl"
#include "data.glsl"
#include "integrate.glsl"

layout (local_size_x = 1, local_size_y = 1, local_size_z = 64) in;

layout (binding = 0, rgba16f) uniform writeonly image2D out_image;

layout (set = 0, binding = 1) uniform sampler2D u_trans_lut;


const int SQRTSAMPLECOUNT = 8;

shared vec3 MultiScatAs1SharedMem[64];
shared vec3 LSharedMem[64];


layout (push_constant) uniform U_AtmosMultiScatPushConst {
    mat4 pv_inv;
    int output_res;
} u_pc;


float fromSubUvsToUnit(float u, float resolution) {
    return (u - 0.5 / resolution) * (resolution / (resolution - 1.0));
}




void UvToLutTransmittanceParams(AtmosphereParameters Atmosphere, out float viewHeight, out float viewZenithCosAngle, vec2 uv) {
    //uv = vec2(fromSubUvsToUnit(uv.x, TRANSMITTANCE_TEXTURE_WIDTH), fromSubUvsToUnit(uv.y, TRANSMITTANCE_TEXTURE_HEIGHT)); // No real impact so off
    float x_mu = uv.x;
    float x_r = uv.y;

    float H = sqrt(Atmosphere.TopRadius * Atmosphere.TopRadius - Atmosphere.BottomRadius * Atmosphere.BottomRadius);
    float rho = H * x_r;
    viewHeight = sqrt(rho * rho + Atmosphere.BottomRadius * Atmosphere.BottomRadius);

    float d_min = Atmosphere.TopRadius - viewHeight;
    float d_max = rho + H;
    float d = d_min + x_mu * (d_max - d_min);
    viewZenithCosAngle = d == 0.0 ? 1.0 : (H * H - rho * rho - d * d) / (2.0 * viewHeight * d);
    viewZenithCosAngle = clamp(viewZenithCosAngle, -1.0, 1.0);
}




void main() {
    const int idx = int(gl_LocalInvocationID.z);
    const ivec2 xy = ivec2(gl_GlobalInvocationID.xy);
    const vec2 pixPos = vec2(gl_GlobalInvocationID.xy) + vec2(0.5, 0.5);

    vec2 uv = pixPos / u_pc.output_res;
    uv = vec2(fromSubUvsToUnit(uv.x, u_pc.output_res), fromSubUvsToUnit(uv.y, u_pc.output_res));

    const AtmosphereParameters Atmosphere = GetAtmosphereParameters();

    float cosSunZenithAngle = uv.x * 2.0 - 1.0;
    vec3 sunDir = normalize(vec3(0.0, sqrt(saturate(1.0 - cosSunZenithAngle * cosSunZenithAngle)), cosSunZenithAngle));
    // We adjust again viewHeight according to PLANET_RADIUS_OFFSET to be in a valid range.
    float viewHeight = Atmosphere.BottomRadius
        + saturate(uv.y + PLANET_RADIUS_OFFSET)
        * (Atmosphere.TopRadius - Atmosphere.BottomRadius - PLANET_RADIUS_OFFSET);

    vec3 WorldPos = vec3(0.0, 0.0, viewHeight);
    vec3 WorldDir = vec3(0.0, 0.0, 1.0);

    const bool ground = true;
    const float SampleCountIni = 20;// a minimum set of step is required for accuracy unfortunately
    const float DepthBufferValue = -1.0;
    const bool VariableSampleCount = false;
    const bool MieRayPhase = false;

    const float SphereSolidAngle = 4.0 * PI;
    const float IsotropicPhase = 1.0 / SphereSolidAngle;

    const float sqrtSample = float(SQRTSAMPLECOUNT);
    float i = 0.5 + float(idx / SQRTSAMPLECOUNT);
	float j = 0.5 + float(idx - float((idx / SQRTSAMPLECOUNT)*SQRTSAMPLECOUNT));
    {
        float randA = i / sqrtSample;
        float randB = j / sqrtSample;
        float theta = 2.0 * PI * randA;
        float phi = acos(1.0 - 2.0 * randB);  // uniform distribution https://mathworld.wolfram.com/SpherePointPicking.html
        float cosPhi = cos(phi);
        float sinPhi = sin(phi);
        float cosTheta = cos(theta);
        float sinTheta = sin(theta);
        WorldDir.x = cosTheta * sinPhi;
        WorldDir.y = sinTheta * sinPhi;
        WorldDir.z = cosPhi;
        SingleScatteringResult result = IntegrateScatteredLuminance(
            pixPos, WorldPos, WorldDir, sunDir, Atmosphere, ground,
            SampleCountIni, DepthBufferValue, VariableSampleCount, MieRayPhase,
            9000000.0, u_trans_lut, vec2(u_pc.output_res), u_pc.pv_inv
        );

        MultiScatAs1SharedMem[idx] = result.MultiScatAs1 * SphereSolidAngle / (sqrtSample * sqrtSample);
        LSharedMem[idx] = result.L * SphereSolidAngle / (sqrtSample * sqrtSample);
    }

    groupMemoryBarrier();
    barrier();

    // 64 to 32
    if (idx < 32)
    {
        MultiScatAs1SharedMem[idx] += MultiScatAs1SharedMem[idx + 32];
        LSharedMem[idx] += LSharedMem[idx + 32];
    }
    groupMemoryBarrier();
    barrier();

    // 32 to 16
    if (idx < 16)
    {
        MultiScatAs1SharedMem[idx] += MultiScatAs1SharedMem[idx + 16];
        LSharedMem[idx] += LSharedMem[idx + 16];
    }
    groupMemoryBarrier();
    barrier();

    // 16 to 8 (16 is thread group min hardware size with intel, no sync required from there)
    if (idx < 8)
    {
        MultiScatAs1SharedMem[idx] += MultiScatAs1SharedMem[idx + 8];
        LSharedMem[idx] += LSharedMem[idx + 8];
    }
    groupMemoryBarrier();
    barrier();
    if (idx < 4)
    {
        MultiScatAs1SharedMem[idx] += MultiScatAs1SharedMem[idx + 4];
        LSharedMem[idx] += LSharedMem[idx + 4];
    }
    groupMemoryBarrier();
    barrier();
    if (idx < 2)
    {
        MultiScatAs1SharedMem[idx] += MultiScatAs1SharedMem[idx + 2];
        LSharedMem[idx] += LSharedMem[idx + 2];
    }
    groupMemoryBarrier();
    barrier();
    if (idx < 1)
    {
        MultiScatAs1SharedMem[idx] += MultiScatAs1SharedMem[idx + 1];
        LSharedMem[idx] += LSharedMem[idx + 1];
    }
    groupMemoryBarrier();
    barrier();
    if (idx > 0)
        return;

    vec3 MultiScatAs1 = MultiScatAs1SharedMem[0] * IsotropicPhase;  // Equation 7 f_ms
    vec3 InScatteredLuminance = LSharedMem[0] * IsotropicPhase;     // Equation 5 L_2ndOrder

    const vec3 r = MultiScatAs1;
    const vec3 SumOfAllMultiScatteringEventsContribution = 1.0 / (1.0 - r);
    vec3 L = InScatteredLuminance * SumOfAllMultiScatteringEventsContribution;  // Equation 10 Psi_ms

    const float MultipleScatteringFactor = 1;
    imageStore(out_image, xy, vec4(MultipleScatteringFactor * L, 1));
}
