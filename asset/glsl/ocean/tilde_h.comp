#version 450

#include "../utils/konst.glsl"

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (binding = 0, rgba32f) uniform writeonly image2D out_image;

layout(set = 0, binding = 1) uniform sampler2D u_noise;


layout (push_constant) uniform U_OceanTildeHPushConst {
    vec2 wind_dir;
    float wind_speed;
    float amplitude;
    int N;
    int L;
} u_pc;


vec4 gauseRnd() {
    const ivec2 tex_coord = ivec2(gl_GlobalInvocationID.xy);
    const vec4 noise_texel = texelFetch(u_noise, tex_coord, 0);

    const float noise0 = clamp(noise_texel.x, 0.001, 1.0);
    const float noise1 = clamp(noise_texel.y, 0.001, 1.0);
    const float noise2 = clamp(noise_texel.z, 0.001, 1.0);
    const float noise3 = clamp(noise_texel.w, 0.001, 1.0);

    const float u0 = 2.0 * PI * noise0;
    const float v0 = sqrt(-2.0 * log(noise1));
    const float u1 = 2.0 * PI * noise2;
    const float v1 = sqrt(-2.0 * log(noise3));

    return vec4(v0 * cos(u0), v0 * sin(u0), v1 * cos(u1), v1 * sin(u1));
}


void main() {
    const vec2 x = vec2(gl_GlobalInvocationID.xy) - float(u_pc.N) * 0.5;
    const vec2 k = x * 2.0 * PI / float(u_pc.L);

    const float L_ = (u_pc.wind_speed * u_pc.wind_speed) / GRAVITY_EARTH;
    float mag = length(k);
    if (mag < 0.00001)
        mag = 0.00001;
    const float mgSq = mag * mag;
    const float l2 = L_ * L_ * 0.001 * 0.001;

    const float h0k = sqrt((u_pc.amplitude / (mgSq * mgSq))
        * pow(dot(normalize(k), normalize(u_pc.wind_dir)), 2)
        * pow(dot(normalize(k), normalize(u_pc.wind_dir)), 2)
        * pow(dot(normalize(k), normalize(u_pc.wind_dir)), 2)
        * exp(-(1.0 / (mgSq * L_ * L_)))
        * exp(-mgSq * l2)) / sqrt(2.0);

    const float h0minusk = sqrt((u_pc.amplitude / (mgSq * mgSq))
        * pow(dot(normalize(-k), normalize(u_pc.wind_dir)), 2)
        * pow(dot(normalize(-k), normalize(u_pc.wind_dir)), 2)
        * pow(dot(normalize(-k), normalize(u_pc.wind_dir)), 2)
        * exp(-(1.0 / (mgSq * L_ * L_)))
        * exp(-mgSq * l2)) / sqrt(2.0);

    const vec4 gause_random = gauseRnd();
    const vec2 h0k_vec = gause_random.xy * h0k;
    const vec2 h0minusk_vec = gause_random.zw * h0minusk;

    const ivec2 global_idx = ivec2(gl_GlobalInvocationID.xy);
    imageStore(out_image, global_idx, vec4(h0k_vec, h0minusk_vec));
}
