#version 450

#include "../utils/complex.glsl"
#include "../utils/konst.glsl"

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (binding = 0, rgba32f) uniform image2D ppong_images[9];
layout (binding = 1, rgba32f) uniform image2D hkt_images[9];

layout (push_constant) uniform U_OceanNaiveIftPushConst {
    int N;
    int stage;  // 0: hor, 1: ver
} u_pc;


void main() {
    const int img_idx = int(gl_GlobalInvocationID.z);
    const ivec2 nm = ivec2(gl_GlobalInvocationID.xy);
    vec4 sum = vec4(0);

    if (0 == u_pc.stage) {
        const float factor = TAU * float(nm.x) / float(u_pc.N);

        for (int i = 0; i < u_pc.N; ++i) {
            const vec4 texel = imageLoad(hkt_images[img_idx], ivec2(i, nm.y));
            const vec2 c = complex_init_exp(float(i) * factor);
            sum.xy += complex_mul(texel.xy, c);
            sum.zw += complex_mul(texel.zw, c);
        }

        imageStore(ppong_images[img_idx], nm, sum);
    }
    else {
        const float factor = TAU * float(nm.y) / float(u_pc.N);

        for (int i = 0; i < u_pc.N; ++i) {
            const vec4 texel = imageLoad(ppong_images[img_idx], ivec2(nm.x, i));
            const vec2 c = complex_init_exp(float(i) * factor);
            sum.xy += complex_mul(texel.xy, c);
            sum.zw += complex_mul(texel.zw, c);
        }

        imageStore(hkt_images[img_idx], nm, sum);
    }
}
