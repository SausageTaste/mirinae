#version 450

#include "../utils/complex.glsl"
#include "../utils/konst.glsl"

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (binding = 0, rgba32f) uniform writeonly image2D out_hkt_dxdy[3];
layout (binding = 1, rgba32f) uniform writeonly image2D out_hkt_dz[3];
layout (binding = 2, rgba32f) uniform writeonly image2D out_hkt_ddxddz[3];
layout (binding = 3, rgba32f) uniform readonly image2D in_hk[3];

layout (push_constant) uniform U_OceanTildeHKtPushConst {
    float time;
    int L[3];
    int N;
} u_pc;


void main() {
    const ivec2 global_idx = ivec2(gl_GlobalInvocationID.xy);
    const int cascade = int(gl_GlobalInvocationID.z);

    const vec2 x = ivec2(gl_GlobalInvocationID.xy) - float(u_pc.N) / 2.0;
    const vec2 k = x * 2.0 * PI / float(u_pc.L[cascade]);
    float mag = length(k);
    if (mag < 0.00001)
        mag = 0.00001;

    const float w = sqrt(GRAVITY_EARTH * mag);
    const vec2 exp_iwt = complex_init_exp(w * u_pc.time);
    const vec4 h0k_texel = imageLoad(in_hk[cascade], global_idx);

    const vec2 hkt_dy = complex_mul(complex_init(h0k_texel.xy), exp_iwt)
        + complex_mul(complex_init(h0k_texel.zw), complex_conj(exp_iwt));
    imageStore(out_hkt_dxdy[cascade], global_idx, vec4(
        complex_mul(vec2(0, -k.x / mag), hkt_dy),
        hkt_dy
    ));
    imageStore(out_hkt_dz[cascade], global_idx, vec4(
        complex_mul(vec2(0, -k.y / mag), hkt_dy),
        0, 1
    ));
    imageStore(out_hkt_ddxddz[cascade], global_idx, vec4(
        complex_mul(vec2(0, k.x), hkt_dy),
        complex_mul(vec2(0, k.y), hkt_dy)
    ));
}
