#version 450

#include "../utils/complex.glsl"
#include "../utils/konst.glsl"

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (binding = 0, rgba32f) uniform writeonly image2D out_hkt_1[3];
layout (binding = 1, rgba32f) uniform writeonly image2D out_hkt_2[3];
layout (binding = 2, rgba32f) uniform readonly image2D in_hk[3];

layout (push_constant) uniform U_OceanTildeHktPushConst {
    float time;
    float repeat_time;
    float depth;
    int L[3];
    int N;
} u_pc;


float dispersion(float mag) {
    const float w_0 = TAU / u_pc.repeat_time;
    const float w_k = sqrt(GRAVITY_EARTH * mag * tanh(mag * u_pc.depth));
    const float a = w_k / w_0;
    return floor(a) * w_0;
}


void main() {
    const ivec2 global_idx = ivec2(gl_GlobalInvocationID.xy);
    const int cascade = int(gl_GlobalInvocationID.z);

    const vec2 x = ivec2(gl_GlobalInvocationID.xy) - float(u_pc.N) / 2.0;
    const vec2 k = x * 2.0 * PI / float(u_pc.L[cascade]);
    float mag = length(k);
    float mag_rcp = 1.0 / mag;
    if (mag < 0.00001) {
        mag = 0.00001;
        mag_rcp = 1.0 / mag;
    }

    const float w = dispersion(mag);
    const vec2 exp_iwt = complex_init_exp(w * u_pc.time);
    const vec4 h0k_texel = imageLoad(in_hk[cascade], global_idx);
    const vec2 h = complex_mul(h0k_texel.xy, exp_iwt)
                + complex_mul(h0k_texel.zw, complex_conj(exp_iwt));
    const vec2 ih = complex_init(-h.y, h.x);  // ih = i * h

    const vec2 Dx = ih * k.x * mag_rcp;
    const vec2 Dy = h;
    const vec2 Dz = ih * k.y * mag_rcp;

    const vec2 dDx_dx = -h * k.x * k.x * mag_rcp;  // Dx * i * k.x
    const vec2 dDy_dx = ih * k.x;                  // Likewise
    const vec2 dDz_dx = -h * k.x * k.y * mag_rcp;

    const vec2 dDy_dz = ih * k.y;
    const vec2 dDz_dz = -h * k.y * k.y * mag_rcp;

    imageStore(out_hkt_1[cascade], global_idx, vec4(
        vec2(Dx.x -     Dz.y, Dx.y +     Dz.x),          // Dx + i * Dz
        vec2(Dy.x - dDz_dx.y, Dy.y + dDz_dx.x)           // Dy + i * dDz_dx
    ));
    imageStore(out_hkt_2[cascade], global_idx, vec4(
        vec2(dDy_dx.x - dDy_dz.y, dDy_dx.y + dDy_dz.x),  // dDy_dx + i * dDy_dz
        vec2(dDx_dx.x - dDz_dz.y, dDx_dx.y + dDz_dz.x)   // dDx_dx + i * dDz_dz
    ));
}
