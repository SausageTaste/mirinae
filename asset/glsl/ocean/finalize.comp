#version 450

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (binding = 0, rgba32f) uniform writeonly image2D out_displacement[3];
layout (binding = 1, rgba32f) uniform writeonly image2D out_derivative[3];
layout (binding = 2, rgba32f) uniform           image2D out_turbulence[3];
layout (binding = 3, rgba32f) uniform readonly  image2D in_hkt_dxdy[3];
layout (binding = 4, rgba32f) uniform readonly  image2D in_hkt_dz[3];
layout (binding = 5, rgba32f) uniform readonly  image2D in_hkt_ddxddz[3];

layout (push_constant) uniform U_OceanFinalizePushConst {
    vec2 hor_displace_scale;
    float foam_threshold;
    float foam_bias;
    float foam_add;
    float dt;
    int N;
} u_pc;


float normalization_factor(ivec2 nm) {
    const float perms[2] = float[2](1.0, -1.0);
    const int index = int(mod(nm.x + nm.y, 2));
    const float perm = perms[index];
    return perm / float(u_pc.N * u_pc.N);
}


void main() {
    const ivec2 nm = ivec2(gl_GlobalInvocationID.xy);
    const int cascade = int(gl_GlobalInvocationID.z);
    const float nor = normalization_factor(nm);

    const vec4 texel_dxdy   = nor * imageLoad(in_hkt_dxdy[cascade],   nm);
    const vec4 texel_dz     = nor * imageLoad(in_hkt_dz[cascade],     nm);
    const vec4 texel_ddxddz = nor * imageLoad(in_hkt_ddxddz[cascade], nm);

    const vec2 DxDz = texel_dxdy.xy;
	const vec2 DyDxz = texel_dxdy.zw;
	const vec2 DyxDyz = texel_dz.xy;
	const vec2 DxxDzz = texel_dz.zw;
    const vec2 lambda = u_pc.hor_displace_scale;

    imageStore(out_displacement[cascade], nm, vec4(
        lambda.x * DxDz.x,
        DyDxz.x,
        lambda.y * DxDz.y,
        1
    ));

    imageStore(out_derivative[cascade], nm, vec4(DyxDyz, DxxDzz * lambda));

    vec4 turb_texel = imageLoad(out_turbulence[cascade], nm);
    const float jacobian = (1 + lambda.x * DxxDzz.x) * (1 + lambda.y * DxxDzz.y) - lambda.x * lambda.y * DyDxz.y * DyDxz.y;
    const float factor = turb_texel.r + u_pc.dt * 0.5 / max(jacobian, 0.5);
    turb_texel.r = min(jacobian, factor);

    imageStore(out_turbulence[cascade], nm, turb_texel);
}
